几何形状
==========

为了在 Pyresample 中处理地理定位数据，我们需要一种方法来定义该地理定位，通过结合 :doc:`geolocated_data` 和 :doc:`projections` 中讨论的概念。Pyresample 通过一组"几何"对象来定义地理定位，这些对象分为两个主要类别：区域和条带。区域（又名区域定义）通常表示等间距像素的网格。另一方面，像素的条带表示非均匀间隔的像素。有关这些概念以及 Pyresample 如何理解信息的更多详细信息，请参阅下面的部分。

条带
------

条带是像素的集合，这些像素可能均匀或不均匀地调整大小和间隔。像素可能是连续的，其中足迹的边缘接触，或者是非连续的。它们可能重叠或间隔很远。数组中的数据可以保持数据的拓扑结构，也可以由无序像素组成。条带的像素可以各自具有不同的足迹形状（例如圆盘、椭圆、正方形等）并且大小不同。通过这种方式，像素条带可用于将任何数据表示为一对坐标数组。通常，这些坐标是以度为单位的经度和纬度数组。一个真实世界和常见的使用条带表示数据的案例是低地球轨道气象卫星仪器，由于仪器的扫描模式，指定观测值位置的最简单方法是单独的坐标。在 Pyresample 中，我们使用 :class:`~pyresample.geometry.SwathDefinition` 类表示条带。

在撰写本文时，Pyresample 没有办法将条带定义为具有这些属性中的一个或多个。由用户使用与其数据兼容的工具。虽然 Pyresample 中的许多实用程序和算法可能接受条带作为输入，但它们可能依赖于那些具有特定属性的条带。例如，一些重采样算法可能假设条带的数组保留观测像素的地理拓扑作为优化。如果这不是真的，结果可能不准确，算法可能不会警告您这种不兼容性。另一方面，Pyresample 中的许多算法或工具可能会简化条带的表示，并将足迹视为空间中的单独点（例如用于距离计算）或假设更不复杂的足迹（例如正方形与椭圆）。

尽管简单，但将数据的地理定位定义为条带可能会带来一些不幸的后果。在条带的最基本定义中，只有经度和纬度坐标（没有额外的元数据），除了保存这两个数组的内存之外，我们想要的任何有关条带的信息要么需要查看每个坐标，要么会对数据做出一些假设。与使用"区域"（见下文）相比，这些类型的操作可能非常昂贵，如果这完全是一个选项的话。例如，如果我们想创建一个表示条带边界坐标的多边形，我们必须假设 2D 经度和纬度数组的外边缘实际上代表条带的边缘。条带的像素不一定按特定顺序排列，因此这可能是一个不正确的假设。此外，对于大型数组，计算准确的边界坐标可能需要很长时间。在某些情况下，数据文件可能带有经度和纬度数组，因为这些数据的典型用户熟悉它们，但实际上表示的是网格化数据。在这些情况下，创建区域（见下面的部分）可能更有效。

.. warning::

   在使用条带时使用特定的 CRS 是 Pyresample 中相对较新的功能。因此，尽管可以在 :class:`~pyresample.geometry.SwathDefinition` 类中设置特定的 CRS，但大多数操作假设任何经度/纬度坐标使用通用的 WGS84 经纬度坐标参考系统。

区域
-----

区域或区域定义表示连续的均匀大小和间隔的像素网格。区域定义在一个特定的坐标参考系统（CRS）上，因此内部单位（例如像素大小、边界范围等）以投影的单位表示，例如度或米（有关更多信息，请参阅 :doc:`projections`）。由于这个严格的定义，我们可以仅用几个属性来表示一个区域。例如，除了 CRS 之外，我们还可以使用：

* 范围：表示网格的底部、左侧、顶部和右侧像素外限的四个值。
* 像素数：X（列）和 Y（行）维度中的像素数。

虽然不一定准确，但有时将这些点/像素视为正方形可能会有所帮助（参见 :doc:`geolocated_data`）。或者，我们可以使用像 X 和 Y 维度中的像素大小或其中一个角像素的坐标等测量值。或者，我们可以使用外部像素的中心点，而不是外部范围。Pyresample 使用 :class:`~pyresample.geometry.AreaDefinition` 来包含所有这些信息。您可以从 :doc:`../howtos/geometry_utils` 指南中了解创建 AreaDefinition 的许多不同方法。

与条带不同，区域定义的属性意味着我们不必在内存中保存数据数组。像素的顺序和连续性也意味着我们可以轻松获得边界坐标或创建数据和区域的子集。我们也知道像素不会相互重叠，因此对于将区域划分为单独的块或段以进行并行处理然后将结果合并在一起几乎没有担心产生伪影。只需要这几个参数来描述一个大区域，这也意味着我们可以快速比较两个区域（例如相等性、哈希等）或以文本格式存储定义（例如 YAML）。

动态区域
-------------

动态区域是缺少完全描述区域所需的一个或多个属性的区域定义。例如，如果您有一个区域定义，您知道 4 个范围值，但不知道其中的像素数。我们仍然可以携带我们确实知道的信息（Pyresample 使用 :class:`~pyresample.geometry.DynamicAreaDefinition`），但是当我们实际想要使用它时（例如重采样），我们需要以某种方式提供缺失的信息。在 Pyresample 中，我们称这个过程为"冻结"动态区域，我们通常从提供的经度和纬度数组中确定信息。

一个常见的用例是拥有一个动态区域，我们知道 CRS 和每个像素的分辨率，但我们不知道完全包含重采样后的输入数据所需的范围。通过使用输入的经度和纬度数组冻结动态区域，我们可以在数据情况（例如极地轨道卫星仪器数据的轨道）之间获得像素大小和"外观"（基于 CRS）一致的输出。
