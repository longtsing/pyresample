地理定位数据
===============

Pyresample 处理的数据通常表示地球（或其他椭球体）上的观测值。当我们确切知道这些数据点的位置、它们代表的区域有多大以及它们与附近其他点的关系时，这些数据点的数组最为有用。其中一些属性可能非常复杂，因此我们可能会简化它们以使计算更容易并简化我们与它们的工作方式。

点或像素
----------------

Pyresample 通常可以处理具有任意维数的数据数组。大多数示例将坚持数组的基本情况，这些数组表示一系列单独的点（1D 数组）、"图像"（2D），在某些情况下还有多波段图像或体积（3D）数组。在所有这些情况下，我们仍然将事物分解为单独的点，在可视化它们时，我们可能将它们表示为像素，但这通常不是准确的表示。

让我们想象一个简单的围绕地球运行的空间仪器，它能够指向地球上的某个位置并获得温度值。我们可以通过温度及其位置（经度和纬度坐标，以度为单位）来表示这个点，但这仍然无法完全定义这个温度的真正含义。

足迹
^^^^^^^^^

我们还应该考虑该点在地球上的"足迹"或大小和形状。通常，基于空间的仪器不会测量地球的单个微米。更可能的是，它正在测量一个数十、数百或数千米宽的区域。我们可以将这个测量区域表示为具有半径的圆盘，但根据诸如测量角度、仪器进行测量的方式（例如在记录时移动）、仪器的工作方式、或者它在各种空间和地球大气条件下的工作方式，或许多其他复杂情况，另一种形状（例如椭圆）可能更准确。所有这些对这个单个数据"点"的潜在表示都需要不同数量的坐标（单点与圆盘与椭圆与边界框）。

在 Pyresample 中实现的许多算法中，这些点将被视为没有影响半径的单个点（例如两点之间的距离计算），或者它们被视为具有宽度和高度的正方形或矩形"像素"数据。这最终取决于所使用的算法或实用程序以及对该算法最有意义的内容。

通过这种方式处理点，我们能够快速处理大型数据数组。它允许在以仪器为中心的数据表示、网格化预报模型和矩形图像之间进行转换。虽然这并不总是最准确的，但它满足了大量的用例。

高程
^^^^^^^^^

我们可能想要关注的数据点的另一个属性是地球上方的高程。如果我们的目标是结合来自不同来源的数据，这可能很重要。例如，基于空间的仪器可能"看到"大气层顶部或云层顶部，而基于地面的仪器或观测可能使用基于地面或较低高度的测量。在许多基本的重采样情况下，不需要对高程进行特殊处理即可获得有效可用的结果。

在撰写本文时，Pyresample 没有针对这些差异的任何特殊处理。如果用例需要这种精度，则由用户处理高程的任何差异。请注意，卫星仪器的地理定位坐标通常会被调整为基于地面。与此相关的另一种调整类型称为视差校正。在撰写本文时，Pyresample 当前没有实现任何视差校正算法，但 :doc:`Satpy 库 <satpy:index>` 有。

像素间距
-------------

Pyresample 中最常见的两种地理定位数据结构是均匀间隔的像素网格（有时称为"区域"）和可变间隔像素的条带。根据我们数据的结构，我们能够在表示它或处理重采样的方式上采取某些捷径。例如，如果我们的数据是均匀间隔的，我们不需要每个像素的坐标，我们可以存储一个像素的坐标和到下一个像素的偏移量（大小）。这可以节省内存（不为每个像素存储坐标），但也让我们快速有效地计算网格的子集（索引、中心坐标、边界坐标等）。

有关不同类型的地理定位结构的更多详细信息，可以在 :doc:`geometries` 文档中找到。

边界多边形
^^^^^^^^^^^^^^^^

对地理定位数据的某些操作并不总是需要知道每个像素的位置。在这些情况下对每个像素进行计算需要大量内存和执行时间，并且得出的答案与仅使用少数边界坐标非常相似。例如，如果我们想知道两个数据集是否重叠，我们可以将大量坐标简化为边界多边形的几个顶点。

请注意，虽然使用多边形对某些操作来说要快得多，但根据数据的结构，创建多边形仍然可能复杂且成本高昂。例如，在非均匀间隔像素的条带的情况下，我们需要从可能非常大的数组中提取坐标子集，可能从磁盘上的数据文件中加载（这是一个缓慢的操作）。

地球模型
------------------

地理定位数据最重要也最复杂的方面之一是所使用的地球（或其他行星）模型。我们可以很容易地使用经度和纬度坐标，但那是用于球形地球还是椭球体？我们坐标系的原点（中心）是否与另一个数据集的坐标系相同？或者我们是将椭球体地球投影到平面上并使用笛卡尔（x/y）坐标？

有数千种表示地球的方法，我们需要知道我们的数据正在使用什么。这是一个大而复杂的主题，但理解它的开始在下一个概念文档中讨论：:doc:`projections`。
